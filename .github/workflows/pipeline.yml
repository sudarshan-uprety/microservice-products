name: Deploy Serverless Application

on:
  push:
    branches:
      - dev
      - uat
      - prod

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [19.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Python 3.8
        run: |
          sudo add-apt-repository ppa:deadsnakes/ppa
          sudo apt-get install -y software-properties-common
          sudo apt-get update
          sudo apt-get install -y python3.8 python3-pip python3-setuptools jq
          pip3 install --upgrade pip
          pip3 --no-cache-dir install --upgrade awscli

      - name: Display available Python version
        run: python3.8 --version

      - name: Install pip for Python 3.8
        run: |
          sudo apt-get install -y python3.8-distutils
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          sudo python3.8 get-pip.py
          sudo ln -s /usr/bin/python3.8 /usr/local/bin/python

      - name: Cache Python Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.cache/serverless-python-requirements
          key: python-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-
            python-

      - name: Install Python Requirements
        run: |
          pip install -r requirements.txt

      - name: Install Serverless Framework
        run: |
          npm install -g serverless@latest
          npm install -g serverless-python-requirements@latest

      - name: Install Serverless Plugins
        run: |
          plugins=("serverless-deployment-bucket" "serverless-python-requirements" "serverless-dotenv-plugin" "serverless-prune-plugin")
          for plugin in "${plugins[@]}"; do
            sls plugin install --name $plugin
          done

      - name: Create .env file from GitHub secret
        run: |
          run: |
            if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
              echo "${{ vars.PROD_ENV }}" > .env
            elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
              echo "${{ vars.UAT_ENV }}" > .env
            elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
              echo "${{ vars.DEV_ENV }}" > .env
            else
              echo "This branch does not have corresponding environment variables"
              exit 1
            fi

      - name: Run Serverless Doctor
        run: serverless doctor

      - name: Set AWS credentials and deploy
        run: |
#          echo "AWS_ACCESS_KEY_ID_DEV: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"
#          echo "AWS_SECRET_ACCESS_KEY_DEV: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"

          if [ "${{ github.event_name }}" == "push" ]; then
            if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
              export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
              export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
              serverless deploy --stage dev
            elif [ "${{ github.ref }}" == "refs/heads/uat" ]; then
              export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
              export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
              serverless deploy --stage uat
            elif [ "${{ github.ref }}" == "refs/heads/prod" ]; then
              export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
              export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
              serverless deploy --stage prod
            else
              echo "Skipping deployment for branch: ${{ github.ref }}"
            fi
          else
            echo "Skipping deployment for event: ${{ github.event_name }}"
          fi

          # Print AWS credentials for verification


#      - name: Install Serverless Framework
#        run: npm install -g serverless
#
#      - name: Install Serverless Plugins
#        run: |
#          npm install serverless-python-requirements serverless-prune-plugin serverless-dotenv-plugin
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install Python dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#
#      - name: Create .env file from GitHub secret
#        run: |
#          run: |
#            if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
#              echo "${{ vars.PROD_ENV }}" > .env
#            elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
#              echo "${{ vars.UAT_ENV }}" > .env
#            elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
#              echo "${{ vars.DEV_ENV }}" > .env
#            else
#              echo "This branch does not have corresponding environment variables"
#              exit 1
#            fi
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
#          aws-region: ap-south-1
#
#      - name: Deploy using Serverless Framework
#        env:
#          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_KEY_DEV }}
#        run: |
#          serverless deploy --stage ${GITHUB_REF##*/} --verbose
#
#      - name: Cleanup old versions
#        env:
#          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_KEY_DEV }}
#        run: |
#          serverless prune -n 1
